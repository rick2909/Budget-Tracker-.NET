@using BudgetTracker.Infrastructure.Models
@using BudgetTracker.Infrastructure.Enums
@using BudgetTracker.Logic.Services.Interfaces
@inject ITransactionService TransactionService

<div class="recent-transactions">
    <h2 class="section-title">Recent Transactions</h2>
    
    <div class="transaction-list">
        @if (isLoading)
        {
            <div class="loading-state">
                <p>Loading recent transactions...</p>
            </div>
        }
        else if (transactions.Any())
        {
            @foreach (var transaction in transactions)
            {
                <div class="transaction-item">
                    <div class="transaction-icon @GetIconClass(transaction.Category?.Name ?? "")">
                        @GetCategoryIcon(transaction.Category?.Name ?? "")
                    </div>
                    <div class="transaction-details">
                        <div class="transaction-name">@transaction.Title</div>
                        <div class="transaction-category">@(transaction.Category?.Name ?? "Unknown")</div>
                    </div>
                    <div class="transaction-amount @GetAmountClass(transaction.Type, transaction.Amount)">
                        @FormatAmount(transaction.Type, transaction.Amount)
                    </div>
                </div>
            }
        }
        else
        {
            <div class="empty-state">
                <p>No recent transactions found.</p>
            </div>
        }
    </div>
</div>

@code {
    private List<Transaction> transactions = new();
    private bool isLoading = true;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadRecentTransactions();
    }
    
    private async Task LoadRecentTransactions()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            var transactionResults = await TransactionService.GetAllTransactionsAsync();
            var allTransactions = transactionResults
                .Where(r => r.IsSuccess && r.Transaction != null)
                .Select(r => r.Transaction!)
                .ToList();
            
            // Get the 5 most recent transactions
            transactions = allTransactions
                .OrderByDescending(t => t.Date)
                .Take(5)
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading recent transactions: {ex.Message}");
            transactions = new List<Transaction>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private string GetIconClass(string category)
    {
        return category.ToLower() switch
        {
            var name when name.Contains("food") || name.Contains("groceries") => "groceries",
            var name when name.Contains("salary") || name.Contains("income") => "salary",
            var name when name.Contains("utility") || name.Contains("bill") => "utilities",
            var name when name.Contains("dining") || name.Contains("restaurant") => "dining",
            var name when name.Contains("rent") || name.Contains("housing") => "rent",
            var name when name.Contains("transport") || name.Contains("gas") => "transport",
            _ => "general"
        };
    }
    
    private string GetCategoryIcon(string category)
    {
        return category.ToLower() switch
        {
            var name when name.Contains("food") || name.Contains("groceries") => "🛒",
            var name when name.Contains("salary") || name.Contains("income") => "💰",
            var name when name.Contains("utility") || name.Contains("bill") => "💡",
            var name when name.Contains("dining") || name.Contains("restaurant") => "🍽️",
            var name when name.Contains("rent") || name.Contains("housing") => "🏠",
            var name when name.Contains("transport") || name.Contains("gas") => "🚗",
            var name when name.Contains("entertainment") => "🎬",
            var name when name.Contains("health") => "💊",
            _ => "📄"
        };
    }
    
    private string GetAmountClass(TransactionType type, decimal amount)
    {
        return type == TransactionType.Income ? "positive" : "negative";
    }
    
    private string FormatAmount(TransactionType type, decimal amount)
    {
        var prefix = type == TransactionType.Income ? "+" : "-";
        return prefix + amount.ToString("C2");
    }
}
