@using BudgetTracker.Logic.Dtos
@using BudgetTracker.Infrastructure.Enums
@inject HttpClient Http
@inject IJSRuntime JS

@code {
    private bool IsRecurring { get; set; }
    private CreateTransactionDto TransactionModel { get; set; } = new()
    {
        Title = "",
        Amount = 0,
        Type = BudgetTracker.Infrastructure.Enums.TransactionType.Expense,
        CategoryId = 1,
        Date = DateTime.Today
    };
    private CreateRecurringTransactionDto RecurringModel { get; set; } = new()
    {
        Title = "",
        Amount = 0,
        Type = BudgetTracker.Infrastructure.Enums.TransactionType.Expense,
        CategoryId = 1,
        StartDate = DateTime.Today,
        RecurrencePattern = BudgetTracker.Infrastructure.Enums.RecurrencePattern.Monthly
    };

    private async Task CloseModal()
    {
        await JS.InvokeVoidAsync("closeMorphModal");
    }

    private async Task SubmitAsync()
    {
        try
        {
            HttpResponseMessage resp;
            if (IsRecurring)
            {
                resp = await Http.PostAsJsonAsync("/api/transactions/recurring", RecurringModel);
            }
            else
            {
                resp = await Http.PostAsJsonAsync("/api/transactions", TransactionModel);
            }

            if (!resp.IsSuccessStatusCode)
            {
                var msg = await resp.Content.ReadAsStringAsync();
                // TODO: Show user-friendly error message
                return;
            }

            await JS.InvokeVoidAsync("closeMorphModal");
        }
        catch (Exception ex)
        {
            // TODO: Show user-friendly error message
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JS.InvokeVoidAsync("AddTransactionModal.init");
            }
            catch (Exception ex)
            {
                // JS init failed silently
            }
        }
    }

    private void ToggleRecurring()
    {
        IsRecurring = !IsRecurring;
        StateHasChanged();
    }
}
<div id="morphModal" class="morph-modal" style="--origin-x: 0px; --origin-y: 0px;">
    <div class="morph-scrim" @onclick="CloseModal"></div>
    <div class="morph-sheet" @onclick:stopPropagation="true">
        <header class="morph-header">
            <h3>Add Transaction</h3>
            <div class="header-actions">
                <div class="toggle-inline" title="Make this a recurring transaction">
                    <span class="toggle-label">Recurring</span>
                    <label class="switch switch--sm">
                        <input type="checkbox"
                               aria-label="Recurring transaction"
                               @bind="IsRecurring"
                               @bind:event="oninput"
                               @onclick:stopPropagation />
                        <span class="switch-track"></span>
                    </label>
                </div>
                <button type="button" class="btn btn--outline btn--sm" onclick="closeMorphModal()">âœ•</button>
            </div>
        </header>
        <section class="morph-content">
            <!-- Hidden input bound to Blazor state; updated by JS -->
            <input type="checkbox" id="isRecurringHidden" style="display:none" @bind="IsRecurring" />

            <!-- Always render both sections; JS controls visibility -->
            <div id="recurringForm" style="display:@(IsRecurring ? "block" : "none")">
                <div class="form-field">
                    <label class="form-label">Title</label>
                    <input type="text" @bind="RecurringModel.Title" placeholder="e.g., Coffee" />
                </div>
                <div class="form-field">
                    <label class="form-label">Amount</label>
                    <input type="number" @bind="RecurringModel.Amount" @bind:event="oninput" placeholder="e.g., 3.50" />
                </div>
                <div class="form-field">
                    <label class="form-label">Category</label>
                    <InputSelect @bind-Value="RecurringModel.CategoryId" TValue="int">
                        <option value="1">Dining</option>
                        <option value="2">Groceries</option>
                        <option value="3">Transport</option>
                        <option value="4">Bills</option>
                    </InputSelect>
                </div>
                <div class="form-field">
                    <label class="form-label">Type</label>
                    <InputSelect @bind-Value="RecurringModel.Type" TValue="TransactionType">
                        @foreach (var t in Enum.GetValues<TransactionType>())
                        {
                            <option value="@t">@t</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-field date-field">
                    <label class="form-label">Start Date</label>
                    <div class="date-input">
                        <input type="date" @bind="RecurringModel.StartDate" />
                    </div>
                </div>
                <div class="form-field date-field">
                    <label class="form-label">End Date</label>
                    <div class="date-input">
                        <input type="date" @bind="RecurringModel.EndDate" />
                    </div>
                </div>
                <div class="form-field">
                    <label class="form-label">Recurrence Pattern</label>
                    <InputSelect @bind-Value="RecurringModel.RecurrencePattern" TValue="RecurrencePattern">
                        @foreach (var rp in Enum.GetValues<RecurrencePattern>())
                        {
                            <option value="@rp">@rp</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div id="singleForm" style="display:@(IsRecurring ? "none" : "block")">
                <div class="form-field">
                    <label class="form-label">Title</label>
                    <input type="text" @bind="TransactionModel.Title" placeholder="e.g., Coffee" />
                </div>
                <div class="form-field">
                    <label class="form-label">Amount</label>
                    <input type="number" @bind="TransactionModel.Amount" @bind:event="oninput" placeholder="e.g., 3.50" />
                </div>
                <div class="form-field">
                    <label class="form-label">Category</label>
                    <InputSelect @bind-Value="TransactionModel.CategoryId" TValue="int">
                        <option value="1">Dining</option>
                        <option value="2">Groceries</option>
                        <option value="3">Transport</option>
                        <option value="4">Bills</option>
                    </InputSelect>
                </div>
                <div class="form-field">
                    <label class="form-label">Type</label>
                    <InputSelect @bind-Value="TransactionModel.Type" TValue="TransactionType">
                        @foreach (var t in Enum.GetValues<TransactionType>())
                        {
                            <option value="@t">@t</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-field date-field">
                    <label class="form-label">Date</label>
                    <div class="date-input">
                        <input type="date" @bind="TransactionModel.Date" />
                    </div>
                </div>
            </div>
        </section>
        <footer class="morph-footer">
            <div class="morph-actions">
                <button type="button" class="btn btn--outline btn--sm" @onclick="CloseModal">Cancel</button>
                <button type="button" class="btn btn--filled btn--sm" @onclick="SubmitAsync">Save</button>
            </div>
        </footer>
    </div>
</div>
<script src="/js/add-transaction-modal.js"></script>