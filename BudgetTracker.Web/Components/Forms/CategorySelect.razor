@using BudgetTracker.Infrastructure.Models
@using BudgetTracker.Logic.Services.Interfaces
@inject ICategoryService CategoryService

<FormField Label="Category">
    <InputSelect @bind-Value="Value" TValue="int" @bind-Value:after="NotifyValueChanged">
        @if (categories.Any())
        {
            @foreach (var category in categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        }
        else
        {
            <option value="0">Loading categories...</option>
        }
    </InputSelect>
</FormField>

@code {
    [Parameter] public int Value { get; set; }
    [Parameter] public EventCallback<int> ValueChanged { get; set; }
    
    private List<Category> categories = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        try
        {
            var categoryResults = await CategoryService.GetAllCategoriesAsync();
            categories = categoryResults
                .Where(r => r.IsSuccess && r.Category != null)
                .Select(r => r.Category!)
                .ToList();
            
            // Set default value if not already set and categories are available
            if (Value == 0 && categories.Any())
            {
                Value = categories.First().Id;
                await NotifyValueChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
        }
    }

    private async Task NotifyValueChanged()
    {
        await ValueChanged.InvokeAsync(Value);
    }
}
