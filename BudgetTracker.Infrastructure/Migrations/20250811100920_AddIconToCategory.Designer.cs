// <auto-generated />
using System;
using BudgetTracker.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BudgetTracker.Infrastructure.Migrations
{
    [DbContext(typeof(SqliteContext))]
    [Migration("20250811100920_AddIconToCategory")]
    partial class AddIconToCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("BudgetTracker.Infrastructure.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Food, drinks, and supermarket purchases",
                            Icon = "shopping_cart",
                            Name = "Groceries"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Restaurants, cafes, takeaways, bars",
                            Icon = "restaurant",
                            Name = "Dining Out"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Electricity, water, gas, internet, phone",
                            Icon = "flash_on",
                            Name = "Utilities"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Rent, mortgage, property maintenance",
                            Icon = "home",
                            Name = "Housing"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Public transport, fuel, tolls",
                            Icon = "commute",
                            Name = "Transport"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Car payments, repairs, insurance",
                            Icon = "directions_car",
                            Name = "Vehicle"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Movies, hobbies, games, streaming services",
                            Icon = "movie",
                            Name = "Entertainment"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Trips, vacations, hotels, flights",
                            Icon = "flight",
                            Name = "Travel"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Medical, dental, pharmacy, health insurance",
                            Icon = "local_hospital",
                            Name = "Health"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Haircuts, beauty, grooming",
                            Icon = "spa",
                            Name = "Personal Care"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Courses, books, learning materials",
                            Icon = "school",
                            Name = "Education"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Professional, repair, or cleaning services",
                            Icon = "build",
                            Name = "Services"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Premiums for health, life, property",
                            Icon = "security",
                            Name = "Insurance"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Crypto, shares, bonds, assets",
                            Icon = "trending_up",
                            Name = "Investments"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Loan payments and repayments",
                            Icon = "account_balance",
                            Name = "Loan"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Charity and contributions",
                            Icon = "volunteer_activism",
                            Name = "Donations"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Primary income from employment",
                            Icon = "attach_money",
                            Name = "Salary"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Income from business or freelance work",
                            Icon = "business_center",
                            Name = "Business"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Received or given gifts",
                            Icon = "card_giftcard",
                            Name = "Gifts"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Interest income or loan interest paid",
                            Icon = "trending_up",
                            Name = "Interest"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Income tax, property tax, other taxes",
                            Icon = "receipt_long",
                            Name = "Taxes"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Transfers to savings or emergency funds",
                            Icon = "savings",
                            Name = "Savings"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Miscellaneous expenses",
                            Icon = "category",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("BudgetTracker.Infrastructure.Models.RecurringTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Pattern")
                        .HasMaxLength(20)
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("RecurringTransactions");
                });

            modelBuilder.Entity("BudgetTracker.Infrastructure.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RecurringTransactionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RecurringTransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BudgetTracker.Infrastructure.Models.RecurringTransaction", b =>
                {
                    b.HasOne("BudgetTracker.Infrastructure.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BudgetTracker.Infrastructure.Models.Transaction", b =>
                {
                    b.HasOne("BudgetTracker.Infrastructure.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BudgetTracker.Infrastructure.Models.RecurringTransaction", "RecurringTransaction")
                        .WithMany("GeneratedTransactions")
                        .HasForeignKey("RecurringTransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("RecurringTransaction");
                });

            modelBuilder.Entity("BudgetTracker.Infrastructure.Models.RecurringTransaction", b =>
                {
                    b.Navigation("GeneratedTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
